================================================================================
                        SmartFusion2 Bootloader
================================================================================
The SmartFusion Bootloader is a flexible Bootloader designed to allow execution
of code in external memory (usually DDR) by loading an application image from
an SPI FLASH device into external memory and executiong it.

The SmartFusion2 Bootloader also supports maintaining and updating up to 3 
application images including a Golden or Factory Default image for recovery in
the case of an update failure.

The SmartFusion2 Bootloader currently supports the SmartFusion2 Security Eval
Kit, SmartFusion2 Eval Kit, SmartFusion2 Dev Kit and the SmartFusion2 Advanced
Dev Kit with pre configured settings available. The user can also tailor the
Bootloader for other platforms.
--------------------------------------------------------------------------------
                            How to use the Bootloader
--------------------------------------------------------------------------------
For the SmartFusion2 boards from Microsemi, the following functionality of the
Bootloader is controlled via the DIP switches:

SW1 - Selects update vs execute mode. Normal operation is to execute the current
      live Firmware image.
SW2 - Selects execute Golden mode. Execute the Golden firmware image instead of
      the current live firmware image.
SW3 - Selects copy Golden mode. Copy the Golden image to the first normal
      firmware image and execute it.
      
On the Eval Kit, Security Eval Kit and Dev Kit the switch layout is:

  +--------+
  | 1 [ #] |   [# ] == selection active.   
  | 2 [ #] |   [ #] == selection inactive.   
  | 3 [ #] |      
  | 4 [ #] |      
  +--------+

On the Advanced Dev Kit the switch layout is:

  +--------+
  | [# ] 8 |   [ #] == selection active.   
  | [# ] 7 |   [# ] == selection inactive.   
  | [# ] 6 |      
  | [# ] 5 |      
  | [# ] 4 |      
  | [# ] 3 |      
  | [# ] 2 |      
  | [# ] 1 |      
  +--------+

When Update mode is selected, the Bootloader expects an Intel Hex file to be
transferred via the Ymodem protocol. Depending on configuration settings, the
Bootloader may send a Banner message via the serial port before waiting for the
file. When the Bootloader is ready to accept the file it transmits 'C' 
characters every few seconds to indicate it is in Ymodem download mode.

The hexfiles folder contains sample applications suitable for the Eval Kit and
the Advanced Dev Kit.
--------------------------------------------------------------------------------
                               UART configuration
--------------------------------------------------------------------------------
To use the YMODEM firmware update functionality of the Bootloader requires
MMUART1 of the Eval Kit/Security Eval Kit or MMUART 0 of the Dev Kit/Advanced
Dev Kit to be connected to a host PC. The host PC must connect to the serial
port using a terminal emulator such as Tera Term or ExtraPuTTY which supports
YMODEM, configured as follows:
    - 57600 baud
    - 8 data bits
    - 1 stop bit
    - no parity
    - no flow control

Connect the board and the PC using the USB MINI B connection.

For the SmartFusion2 Eval Kit/Security Eval Kit and Dev Kit the serial port to
use will be 4th serial port provided by the 4232H device and may be labelled
"USB Serial Converter D".

For the Advanced Dev Kit the serial port to use will be 3rd serial port provided
by the 4232H device and may be labelled "USB Serial Converter C".
--------------------------------------------------------------------------------
                                Target hardware
--------------------------------------------------------------------------------
The example designs for the Bootloader are built for a design using an APB clock
frequency of 83MHz (71MHz for the Security Eval Kit). Trying to execute this
example project on a different design will result in incorrect baud rate being
used by the MMUARTs or no output if the MMUARTs are not enabled and connected.

The Bootloader project can be used with another design using a different clock
configuration. This can be achieved by overwriting the content of this example
project's "drivers_config/sys_config" folder with the one generated by Libero
as part of your design's creation. Please note however, some of the files in the
"drivers_config/sys_config" and other driver and CMSIS folders are customised
for the Bootloader as detailed in the SmartFusion2 Bootloader User Guide.  
    
The following MSS GPIOs are used in the example for the SmartFusion2 Security
Eval Kit and the SmartFusion2 Eval Kit: 

    MSS_GPIO_0  - L20 - Eval Kit SW1
    MSS_GPIO_1  - K16 - Eval Kit SW2
    MSS_GPIO_2  - K18 - Eval Kit SW3
    MSS_GPIO_3  - J18 - Eval Kit SW4
    MSS_GPIO_4  - L19 - Eval Kit DIP1
    MSS_GPIO_5  - L18 - Eval Kit DIP2
    MSS_GPIO_6  - K21 - Eval Kit DIP3
    MSS_GPIO_7  - K20 - Eval Kit DIP4
    MSS_GPIO_8  - E1  - LED 1, flashes once a second to show link status task is active
    MSS_GPIO_9  - F4  - LED 2, toggles each time an RNDIS control message is received
    MSS_GPIO_10 - F3  - LED 3, toggles each time a network packet is received
    MSS_GPIO_11 - G7  - LED 4, toggles each time a network packet is sent
    MSS_GPIO_12 - H7  - LED 5
    MSS_GPIO_13 - J6  - LED 6
    MSS_GPIO_14 - H6  - LED 7
    MSS_GPIO_15 - H5  - LED 8
    MSS_GPIO_16 - R16 - USB PHY Reset 
    MSS_GPIO_17 - K15 - SPI FLASH Reset
    MSS_GPIO_18 - L16 - SPI FLASH WP 
 
    MSS_GPIO_24 - AB15 - MSIO110PB4 J1 pin 1,  for debug output purposes
    MSS_GPIO_25 - AA15 - MSIO110NB4 J1 pin 3,  for debug output purposes
    MSS_GPIO_26 - AB18 - MSIO118PB4 J1 pin 7,  for debug output purposes
    MSS_GPIO_27 - Not used due to clash with MSS UART 0 fabric requirements 
    MSS_GPIO_28 - AB19 - MSIO118NB4 J1 pin 9,  for debug output purposes
    MSS_GPIO_29 - Y18  - MSIO117PB4 J1 pin 13, for debug output purposes
    MSS_GPIO_30 - Y19  - MSIO117NB4 J1 pin 15, for debug output purposes
    MSS_GPIO_31 - W16  - MSIO115PB4 J1 pin 19, for debug output purposes

    MMUART_0_RXD - D1  - MSIO072PB7 J1 pin 55, for debug output purposes
    MMUART_0_TXD - D2  - MSIO072NB7 J1 pin 57, for debug output purposes

The following MSS GPIOs are used in the example for the SmartFusion2 Advanced
Dev Kit:

    MSS_GPIO_0  - J25 - Adv Dev Kit SW1
    MSS_GPIO_1  - H25 - Adv Dev Kit SW2
    MSS_GPIO_2  - J24 - Adv Dev Kit SW3
    MSS_GPIO_3  - H23 - Adv Dev Kit SW4
    MSS_GPIO_4  - F25 - Adv Dev Kit DIP0
    MSS_GPIO_5  - G25 - Adv Dev Kit DIP1
    MSS_GPIO_6  - J23 - Adv Dev Kit DIP2
    MSS_GPIO_7  - J22 - Adv Dev Kit DIP3
    MSS_GPIO_8  - D26 - LED 0, flashes once a second to show link status task is active
    MSS_GPIO_9  - F26 - LED 1, toggles each time an RNDIS control message is received
    MSS_GPIO_10 - A27 - LED 2, toggles each time a network packet is received
    MSS_GPIO_11 - C26 - LED 3, toggles each time a network packet is sent
    MSS_GPIO_12 - Not used due to clash with MSS SPI 1 fabric requirements
    MSS_GPIO_13 - Not used due to clash with MSS SPI 1 fabric requirements
    MSS_GPIO_14 - C27 - LED 6
    MSS_GPIO_15 - E26 - LED 7
    MSS_GPIO_16 - N9  - USB PHY Reset 
    MSS_GPIO_17 - N3  - SPI FLASH 0 WP
    MSS_GPIO_18 - J2  - SPI FLASH 1 WP
    MSS_GPIO_12 - C28 - LED 4
    MSS_GPIO_13 - B27 - LED 5
 
    MSS_GPIO_24 - R7  - BB_GPIO 5,  for debug output purposes
    MSS_GPIO_25 - P7  - BB_GPIO 6,  for debug output purposes
    MSS_GPIO_26 - M2  - BB_GPIO 7,  for debug output purposes
    MSS_GPIO_27 - M3  - BB_GPIO 8,  for debug output purposes
    MSS_GPIO_28 - R9  - BB_GPIO 9,  for debug output purposes
    MSS_GPIO_29 - R10 - BB_GPIO 10, for debug output purposes
    MSS_GPIO_30 - P8  - BB_GPIO 11, for debug output purposes
    MSS_GPIO_31 - P9  - BB_GPIO 12, for debug output purposes

    MMUART_1_RXD - L10 - BB_UART_RX, for debug output purposes
    MMUART_1_TXD - E3  - BB_UART_TX, for debug output purposes-
    
The following MSS GPIOs are used in the example for the SmartFusion2 Dev Kit:

    MSS_GPIO_0  - W6  - Dev Kit SW1
    MSS_GPIO_1  - AA1 - Dev Kit SW2
    MSS_GPIO_2  - AB1 - Dev Kit SW3
    MSS_GPIO_3  - AB2 - Dev Kit SW4
    MSS_GPIO_4  - R3  - Dev Kit DIP0
    MSS_GPIO_5  - R4  - Dev Kit DIP1
    MSS_GPIO_6  - AE2 - Dev Kit DIP2
    MSS_GPIO_7  - AD1 - Dev Kit DIP3
    MSS_GPIO_8  - A18 - LED 0, flashes once a second to show link status task is active
    MSS_GPIO_9  - B18 - LED 1, toggles each time an RNDIS control message is received
    MSS_GPIO_10 - D18 - LED 2, toggles each time a network packet is received
    MSS_GPIO_11 - E18 - LED 3, toggles each time a network packet is sent
    MSS_GPIO_12 - A20 - LED 4
    MSS_GPIO_13 - B20 - LED 5
    MSS_GPIO_14 - C27 - LED 6
    MSS_GPIO_15 - E26 - LED 7
    MSS_GPIO_16 - P24 - USB PHY Reset 
    MSS_GPIO_17 - J29 - ADS8568_SDO_C/FMC_J29, for debug output purposes
    MSS_GPIO_18 - J28 - ADS8568_SDO_D/FMC_J28, for debug output purposes
 
    MSS_GPIO_24 - N23 - ADS8568_RDn/FMC_N23,  for debug output purposes
    MSS_GPIO_25 - L26 - ADS8568_DB0/FMC_L26,  for debug output purposes
    MSS_GPIO_26 - M25 - ADS8568_DB1/FMC_M25,  for debug output purposes
    MSS_GPIO_27 - Not used due to clash with MSS UART 0 fabric requirements 
    MSS_GPIO_28 - J30 - ADS8568_DB2/FMC_J30,  for debug output purposes
    MSS_GPIO_29 - H29 - ADS8568_DB3/FMC_H29,  for debug output purposes
    MSS_GPIO_30 - G30 - ADS8568_DB8/FMC_G30,  for debug output purposes
    MSS_GPIO_31 - F30 - ADS8568_DB11/FMC_F30, for debug output purposes

    MMUART_1_RXD - G29 - RS232_ROUT/FMC_G29, for debug output purposes
    MMUART_1_TXD - H30 - RS232_DIN/FMC_H30, for debug output purposes

Note 1: The MSS GPIOs marked "for debug output purposes" were included in the
design to allow them be toggled for debug purposes and are optional. The final
example software initializes these pins but does not use them.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                          Silicon revision dependencies
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
This example is built to execute on an M2S150T or M2S025T. You may need to 
overwrite this example project's "drivers_config/sys_config" and "CMSIS" folders
with the one generated by Libero for your hardware design if using different
devices.

The "drivers_config/sys_config" folder contains information about your hardware
design. This information is used by the CMSIS to initialize clock frequencies
global variables which are used by the SmartFusion2 drivers to derive baud
rates. The CMSIS boot code may also complete the device's clock configuration
depending on silicon version. The "CMSIS" and "drivers_config/sys_config" for
your design can be found in the "firmware" folder of your Libero design.
